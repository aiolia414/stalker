#!/usr/bin/python

import curses
import curses.ascii
import getpass
import json
import locale
import optparse
import os
import signal
import sys
import time
import urllib2


class Stalkly(object):
    def __init__(self, base_url, api_key, username, refresh_freq):
        self.base_url = base_url
        self.api_key = api_key
        self.clusters = {}
        self.refresh_freq = refresh_freq
        self.username = username
        self.local_cluster = self.json_request('/stats').keys()[0]

    def json_request(self, address, method='GET', data=None, cluster=None):
        if cluster is None:
            base = self.base_url
            key = self.api_key
        else:
            base = self.clusters[cluster]['host']
            key = self.clusters[cluster]['key']
        if data:
            req = urllib2.Request(base + address, data=json.dumps(data))
            req.add_header('Content-Type', 'application/json')
        else:
            req = urllib2.Request(base + address)
        req.add_header('X-Api-Key', key)
        req.get_method = lambda: method
        data = urllib2.urlopen(req).read()
        return json.loads(urllib2.urlopen(req).read())

    def refresh_alerts(self, state='alerting'):
        try:
            alerting = self.json_request('/checks/state/%s' % state)[state]
            for alert in alerting:
                if alert.has_key('_id'):
                    alert['id'] = alert.pop('_id')
                alert['cluster'] = self.local_cluster
            self.clusters = self.json_request('/global/clusters')['clusters']
            for cluster in self.clusters.keys():
                try:
                    remote_alerting = self.json_request(
                        '/global/%s/checks/state/%s' %
                        (cluster, state))[cluster][state]
                    for alert in remote_alerting:
                        if alert.has_key('_id'):
                            alert['id'] = alert.pop('_id')
                        alert['cluster'] = cluster
                    alerting.extend(remote_alerting)
                except Exception as e:
                    alerting.append({'cluster': cluster,
                                     'check': 'cluster_update',
                                     'hostname': '*', 'id': cluster,
                                     'out': str(e)})
                    pass
            self.clusters[self.local_cluster] = {'host': self.base_url,
                                                 'key': self.api_key}
            alerting.sort(key=lambda alert: '%(cluster)s %(hostname)s' % alert)
            return alerting
        except Exception as e:
            return [{'cluster': 'all', 'check': 'update', 'hostname': '*',
                     'id': 'whatevs', 'out': str(e)}]

    def alertwindow(self, window, alert):
        newwin = window.subwin(18, 80, 2, 0)
        newwin.keypad(True)
        options = ('Do Nothing', 'Claim', 'Remove Claim', 'Suspend')
        selected = 0
        while True:
            newwin.erase()
            newwin.box()
            newwin.addstr(1, 1, ' Update Alert..')
            newwin.chgat(1, 1, 78, curses.A_BOLD | curses.color_pair(2))
            newwin.addstr(3, 1, " %(cluster)s / %(hostname)s" % alert)
            newwin.addnstr(4, 1, ' ' + alert['check'], 75)
            newwin.addnstr(
                5, 1, ' ' + alert['out'].split(';')[0].replace('\n', ' '), 75)
            for y, option in enumerate(options):
                newwin.addnstr(y + 8, 3, option, 75)
                if y == selected:
                    newwin.chgat(y + 8, 3, 75, curses.A_REVERSE)
            key = newwin.getch()
            if key in (ord('\n'), curses.KEY_ENTER):
                if options[selected] == 'Claim':
                    self.json_request(
                        '/checks/id/' + alert['id'] + '/owner',
                        'POST', {'owner': self.username}, alert['cluster'])
                    alert['owner'] = self.username
                elif options[selected] == 'Remove Claim':
                    self.json_request('/checks/id/' + alert['id'] + '/owner',
                                      'DELETE', {}, alert['cluster'])
                    alert['owner'] = ''
                elif options[selected] == 'Suspend':
                    self.json_request(
                        '/checks/id/' + alert['id'] + '/suspended',
                        'POST', {'suspended': True}, alert['cluster'])
                break
            elif key in (ord('k'), curses.KEY_UP):
                selected = (selected - 1) % len(options)
            elif key in (ord('\t'), ord('j'), curses.KEY_DOWN):
                selected = (selected + 1) % len(options)
            elif key in (curses.ascii.ESC, ord('q')):
                break

    def __call__(self, stdscr):
        curses.use_default_colors()
        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_RED)
        curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLUE)
        curses.init_pair(3, -1, -1)
        stdscr.attron(curses.color_pair(3))
        curses.curs_set(0)
        height, width = stdscr.getmaxyx()
        stdscr.timeout(2000)
        alerting = [{'cluster': '', 'hostname': '', 'check': '', 'out': '',
                     'id': -1}] * (height + 2)
        last_update = 0
        selected = 0
        start = 0
        while True:
            stdscr.erase()
            stdscr.addstr(0, 0, '%-5.5s %-20.20s %-30.30s %-12.12s %s' %
                          ('Cluster', 'Server', 'Check', 'Owner', 'Output'))
            stdscr.chgat(0, 0, width, curses.color_pair(2) | curses.A_BOLD)
            last_hostname = last_cluster = ''
            y = 1
            for alert in alerting[start:start + height - 2]:
                if alert['hostname'] == last_hostname:
                    hostname = ''
                else:
                    hostname = alert['hostname']
                    last_hostname = hostname
                if alert['cluster'] == last_cluster:
                    cluster = ''
                else:
                    cluster = alert['cluster']
                    last_cluster = cluster
                flags = ''
                if 'notes' in alert:
                    flags += 'N'
                formatted = ('%-5.5s %-20.20s %-30.30s %-12.12s %-s' %
                             (cluster, hostname, alert['check'],
                              alert.get('owner', ''),
                              alert['out'].split(';')[0].replace('\n', ' ')))
                stdscr.addnstr(y, 0, formatted, width)
                if y + start == selected + 1:
                    stdscr.chgat(y, 0, width, curses.A_REVERSE)
                y += 1
            stdscr.addstr(height - 1, 0,
                          '%s / %s alerts' % (selected + 1, len(alerting)))
            stdscr.chgat(height - 1, 0, width,
                         curses.color_pair(2) | curses.A_BOLD)
            key = -1
            while key == -1:
                if time.time() - last_update > self.refresh_freq:
                    stdscr.addstr(height - 1, 0, ' REFRESHING... ')
                    stdscr.chgat(height - 1, 0, width,
                                 curses.color_pair(1) | curses.A_BOLD)
                    stdscr.refresh()
                    was_selected = alerting[selected]['id']
                    selected = 0
                    was_start = alerting[start]['id']
                    start = 0
                    alerting = self.refresh_alerts()
                    for x, alert in enumerate(alerting):
                        if alert['id'] == was_selected:
                            selected = x
                        if alert['id'] == was_start:
                            start = x
                    last_update = time.time()
                    break
                key = stdscr.getch()
            if key == ord('r'):
                last_update = 0
            elif key == ord('q'):
                return
            elif key in (ord('j'), curses.KEY_DOWN):
                selected += 1
            elif key in (ord('k'), curses.KEY_UP):
                selected -= 1
            elif key == ord('g'):
                selected = 0
            elif key == ord('G'):
                selected = len(alerting) - 1
            elif key == curses.KEY_NPAGE:
                selected += height - 2
            elif key == curses.KEY_PPAGE:
                selected -= height - 2
            elif key in (ord('\n'), curses.KEY_ENTER):
                self.alertwindow(stdscr, alerting[selected])
            elif key == curses.KEY_RESIZE:
                height, width = stdscr.getmaxyx()
                stdscr.clear()

            if selected < 0:
                selected = 0
            if selected > len(alerting) - 1:
                selected = len(alerting) - 1

            while selected > start + height - 3:
                start += 1
            while selected < start:
                start -= 1
            if len(alerting) < height - 2:
                start = 0


def sigwinch_handler(n, frame):
    curses.endwin()
    curses.initscr()
    curses.ungetch(curses.KEY_RESIZE)


def main(*args, **kwargs):
    usage = '''%prog'''
    args = optparse.OptionParser(usage)
    args.add_option('--refresh', '-r', type='int', dest='refresh_freq',
                    default=120, help='Alert refresh frequency, in seconds')
    args.add_option('--user', '-U', dest="username", default=getpass.getuser(),
                    help="Use this as the username in place of the shell owner")
    options, arguments = args.parse_args()

    base_url = api_key = None
    locale.setlocale(locale.LC_ALL, "")
    signal.signal(signal.SIGWINCH, sigwinch_handler)
    if os.path.exists('/etc/stalker/stalker-client.conf'):
        for line in open('/etc/stalker/stalker-client.conf'):
            if line.startswith('stalkerweb_url'):
                base_url = line.split('=')[1].strip().rstrip('/')
            elif line.startswith('stalkerweb_api_key'):
                api_key = line.split('=')[1].strip()
    if not base_url or not api_key:
        print "Unable to load configs."
        sys.exit(0)
    else:
        curses.wrapper(Stalkly(base_url, api_key, options.username,
                               options.refresh_freq))

if __name__ == '__main__':
    main()
