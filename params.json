{"name":"Stalker","tagline":"A simpler monitoring system experiment ","body":"Stalker Monitoring System - PoC\r\n===============================\r\n\r\nComponents:\r\n \r\n - stalker_agent - Runs on the clients, registers the client with the master, executes local checks.\r\n - stalkerweb - Client registration end point and Web UI\r\n - stalker_manager - Just parses the master db and puts work on the queue for the runners.\r\n - stalker_runner - Reads work queue, hits clients stalker_agent to run checks, schedules checks next run, takes care of notifications.\r\n - MongoDB (its what I had installed...could be anything else). Just stores check states and host config info.\r\n - Redis - Could do without now, but handy if we run multiple stalker_runners down the road\r\n\r\n\r\n## stalker_agent.py\r\n\r\nstalker_agent.py runs on all client boxes. On boot it looks in stalker-agent.conf for defined checks, but you can also just drop scripts in `script_dir` and it will automatically use them as well . Once its discovered what checks should be run it notifies stalkerweb and reports what checks it found installed and configured, and at what interval they should be run at. It then fires\r\nup a wsgi app on port 5050 to listen for requests to run installed checks. You can trigger a check be run like so:\r\n\r\n    fhines@ubuntu:~/stalker (master)[virt]$ http http://localhost:5050/check_load X-CHECK-KEY:canhazstatus\r\n    HTTP/1.1 200 OK\r\n    Content-Length: 173\r\n    Content-Type: application/json\r\n    Date: Mon, 25 Mar 2013 04:36:44 GMT\r\n    \r\n    {\r\n        \"check_load\": {\r\n            \"err\": \"\", \r\n            \"out\": \"OK - load average: 0.01, 0.08, 0.12|load1=0.010;1.000;2.000;0; load5=0.080;5.000;10.000;0; load15=0.120;10.000;15.000;0;\", \r\n            \"status\": 0\r\n        }\r\n    }\r\n    \r\n## stalkerweb\r\n\r\nStalkerweb simply listens for agents to register themselves and then inserts their info (hostname, src ip, checks to run,\r\nroles, etc) into a central database. In addition it also exposes a simple web interface and api to query for active\r\nchecks or configured hosts. In addition to the UI running on http://stalkerweb:5000/ theres also a few api calls exposed that return a JSON response:\r\n\r\n| URI\t| Description | Methods |\r\n|-------|---------------|-----------|\r\n| /global/clusters | Config info for all known stalker clusters | GET |\r\n| /stats | Statistics for local instance| GET |\r\n| /stats/<clusterid> | Statistics for remote stalker clusters | GET |\r\n| /findhost | Just used for the type ahead when | GET |\r\n| /register/ | stalker_agent registration end point |  POST |\r\n| /hosts/ | All hosts | GET |\r\n| /hosts/[hostname] |  Config for a specific host | GET |\r\n| /checks/ | All checks | GET |\r\n| /checks/host/[hostname] | checks matching to a specific host or ip | GET |\r\n| /checks/id/[checkid] | A specific check | GET, DELETE |\r\n| /checks/id/[checkid]/next | Get or Set next run time | GET, POST |\r\n| /checks/id/[checkid]/suspended | Get or Set suspend state | GET, POST |\r\n| /checks/state/[state] |  All checks for a given state [alerting, pending, in_maintenance] | GET |\r\n| /global/<clusterid>/checks/state/<state> | All checks for a given state in a remote stalker claster | GET |\r\n| /user/ | List all users | GET |\r\n| /user/<username> | List/Modify/Delete a user | GET, POST, DELETE |\r\n| /routes/list | Get a list of all available flask routes | GET |\r\n\r\n## stalker_manager\r\n\r\nstalker-manager is charge of scheduling checks with runners. At the moment it really just checks the db for checks that need to be run and drop's them on a Redis queue.\r\n\r\n## stalker_runner\r\n\r\nIt pulls checks out of a Redis list. Then makes the http call for the check to the agent. It parses the result and updates the database accordingly (i.e. marking a check as failed, setting the next run time, etc). It also does basic flap detection, and handles notifications using any enabled notification plugins.\r\n\r\n## Notification Plugins\r\n\r\n - Pagerduty Incident API (Support's triggering and resolving)\r\n - Mailgun API\r\n - Email via smtplib\r\n - Shell Command Execution*\r\n - HTTP POST*\r\n\r\n## TODO's\r\n\r\nSee issues. (Theres lots)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}